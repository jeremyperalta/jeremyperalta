
Task 4
Now that you've defined the analyze_logins() function, call it to test out how it behaves.

Call analyze_logins() with the arguments "ejones" and 9.

Be sure to replace each ### YOUR CODE HERE ### with your own code before you run the following cell.

# Define a function named `analyze_logins()` that takes in two parameters, `username` and `current_day_logins`

def analyze_logins(username, current_day_logins):

    # Display a message about how many login attempts the user has made that day

    print("Current day login total for", username, "is", current_day_logins)

# Call `analyze_logins()`

analyze_logins('ejones', 9)
Current day login total for ejones is 9
Hint 1
To call the analyze_logins() function after it's defined, write analyze_logins(). Then make sure to place the arguments "ejones" and 9 inside the parantheses.

Hint 2
The function call should be written as analyze_logins("ejones", 9).

Question 3
What does this function display? Would the output vary for different users?

The function displayed the provided username and logins, and the output would changed based on the arguments we provided

Task 5
Now, you'll need to expand this function so that it also provides the average number of login attempts made by the user on that day. Doing this will require incorporating a third parameter into the function definition.

In this task, add a parameter called average_day_logins. The code will use this parameter to display an additional message. The additional message will convey the average login attemps made by the user on that day. Then, call the function with the same first and second arguments as used in Task 4 and a third argument of 3.

Be sure to replace each ### YOUR CODE HERE ### with your own code before you run the following cell.

# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`

def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day

    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about average number of login attempts the user has made that day

    print("Average logins per day for", username, "is", average_day_logins)

# Call `analyze_logins()`

analyze_logins('ejones', 9, 3)
    
Current day login total for ejones is 9
Average logins per day for ejones is 3
Hint 1
In Python, to define a function that takes in parameters, place the names of the parameter inside the parantheses at the function header, with a , between each parameter and the next.

Hint 2
You need to define a function named analyze_logins() that takes in three parameters, username, current_day_logins, and average_day_logins. So you'll need to write username, current_day_logins, average_day_logins inside the parantheses.

Hint 3
To call the analyze_logins() function after it's defined, write analyze_logins(). Then make sure to place the arguments "ejones", 9, and 3 inside the parantheses.

Task 6
In this task, you'll further expand the function. Include a calculation to get the ratio of the logins made on the current day to the logins made on an average day. Store this in a new variable named login_ratio. The function displays an additional message that uses this variable.

Note that if average_day_logins is equal to 0, then dividing current_day_logins by average_day_logins will cause an error. Due to the error, Python will display the following message: ZeroDivisionError: division by zero. For this activity, assume that all users will have logged in at least once before. This means that their average_day_logins will be greater than 0, and the function will not involve dividing by zero.

After defining the function, call the function with the same arguments that you used in the previous task.

Be sure to replace each ### YOUR CODE HERE ### with your own code before you run the following cell.

# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`

def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day

    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about average number of login attempts the user has made that day

    print("Average logins per day for", username, "is", average_day_logins)

    # Calculate the ratio of the logins made on the current day to the logins made on an average day, storing in a variable named `login_ratio`

    login_ratio = current_day_logins / average_day_logins

    # Display a message about the ratio

    print(username, "logged in", login_ratio, "times as much as they do on an average day.")

# Call `analyze_logins()`

analyze_logins('ejones', 9, 3)
Current day login total for ejones is 9
Average logins per day for ejones is 3
ejones logged in 3.0 times as much as they do on an average day.
Hint 1
To calculate the ratio of the logins made on the current day to the logins made on an average day, divide current_day_logins by average_day_logins.

Assign a variable named login_ratio to the result of this calculation, using the = assignment operator.

Hint 2
To assign a variable named login_ratio to the result of the calculation, use the = assignment operator. Write login_ratio to the left of =, and place the calculation to the right of =.

Hint 3
Call the updated analyze_logins() function and pass in "ejones", 9, and 3 as the three arguments, in that order.

Question 4
What does this version of the analyze_logins() function display? Would the output vary for different users?

The new function displays how much more or less the user has logged in compared to their average. The ouput would change based on the second and third arguments we provide

Task 7
You'll continue working with the analyze_logins() function and add a return statement to it. Return statements allow you to send information back to the function call.

In this task, use the return keyword to output the login_ratio from the function, so that it can be used later in your work.

You'll call the function with the same arguments used in the previous task and store the output from the function call in a variable named login_analysis. You'll then use a print() statement to display the saved information.

Be sure to replace each ### YOUR CODE HERE ### with your own code before you run the following cell.

# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`

def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day

    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about average number of login attempts the user has made that day

    print("Average logins per day for", username, "is", average_day_logins)

    # Calculate the ratio of the logins made on the current day to the logins made on an average day, storing in a variable named `login_ratio`

    login_ratio = current_day_logins / average_day_logins

    # Return the ratio

    return login_ratio

# Call `analyze_logins() and store the output in a variable named `login_analysis`

login_analysis = analyze_logins("ejones", 9, 3)

# Display a message about the `login_analysis`

print("ejones", "logged in", login_analysis, "times as much as they do on an average day.")
Current day login total for ejones is 9
Average logins per day for ejones is 3
ejones logged in 3.0 times as much as they do on an average day.
Hint 1
When defining the analyze_logins() function this time, place the return keyword in front of the output that you want the function to return.

Hint 2
When defining the analyze_logins() function this time, write return in front of login_ratio. (Do not place parentheses after the return keyword. It is not a function.)

Question 5
How does this version of the analyze_logins() function compare to the previous versions?

Now instead of printing out the result, we return the login_ratio to be used outside of the function

Task 8
In this task, you'll use the value of login_analysis in a conditional statement. When the value of login_analysis is greater than or equal to 3, then the login activity will require further investigation, and an alert will be displayed. Incorporate this condition to complete the conditional statement in the code.

Be sure to replace each ### YOUR CODE HERE ### with your own code before you run the following cell.

# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`

def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day

    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about average number of login attempts the user has made that day

    print("Average logins per day for", username, "is", average_day_logins)

    # Calculate the ratio of the logins made on the current day to the logins made on an average day, storing in a variable named `login_ratio`

    login_ratio = current_day_logins / average_day_logins

    # Return the ratio

    return login_ratio

# Call `analyze_logins() and store the output in a variable named `login_analysis`

login_analysis = analyze_logins("ejones", 9, 3)

# Conditional statement that displays an alert about the login activity if it's more than normal

if login_analysis >= 3:
    print("Alert! This account has more login activity than normal.")
    
Current day login total for ejones is 9
Average logins per day for ejones is 3
Alert! This account has more login activity than normal.
Hint 1
To calculate the ratio of the logins made on the current day to the logins made on an average day, divide current_day_logins by average_day_logins.

Assign a variable named login_ratio to the result of this calculation, using the = assignment operator.

Hint 2
To assign a variable named login_ratio to the result of the calculation, use the = assignment operator. Write login_ratio to the left of =, and place the calculation to the right of =.

Hint 3
Call the updated analyze_logins() function and pass in "ejones", 9, and 3 as the three arguments, in that order.

Conclusion
What are your key takeaways from this lab?

Parameters are an essential tool in making functions better for general use throughout a program.

Return statements help simplify code by calling functions to do complex tasks or calculations and provide the answer to be used or stored in a variable outside the function.
